name: Terraform Deploy

on:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.1.0"

  install-gettext:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Install gettext
        run: sudo apt-get update && sudo apt-get install -y gettext

  configure-aws-credentials:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
          chmod 600 ~/.aws/credentials

  generate-user-data:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Create user_data.sh
        run: envsubst < ${{ github.workspace }}/../user_data.sh.template > ${{ github.workspace }}/../user_data.sh

  initialize-terraform:
    runs-on: ubuntu-latest
    needs: [setup, install-gettext, configure-aws-credentials, generate-user-data]

    steps:
      - name: Initialize Terraform
        run: terraform init

  validate-terraform:
    runs-on: ubuntu-latest
    needs: initialize-terraform

    steps:
      - name: Validate Terraform configuration
        run: terraform validate

  plan-terraform:
    runs-on: ubuntu-latest
    needs: [initialize-terraform, validate-terraform]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan'

    steps:
      - name: Generate Terraform plan
        run: terraform plan --var-file=london.tfvars -out=tfplan

  apply-terraform:
    runs-on: ubuntu-latest
    needs: [initialize-terraform, validate-terraform, plan-terraform]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'

    steps:
      - name: Apply Terraform changes
        run: terraform apply --var-file=london.tfvars -auto-approve tfplan

  destroy-terraform:
    runs-on: ubuntu-latest
    needs: [initialize-terraform, validate-terraform]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Destroy Terraform resources
        run: terraform destroy --var-file=london.tfvars -auto-approve
